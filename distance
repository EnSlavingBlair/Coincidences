#!/usr/bin/env python

from astropy import coordinates as apc
import numpy as np
import itertools
import re
from matplotlib import pyplot as plt

def efficiency1(filename):
    # convert efficiency data into usable variables
    data = []
    with open(gw_eff_file, 'r') as f:
        # start at line 4 and stop at 4
        for line in itertools.islice(f, 4, 5):
            # get the titles of each column
            col_names = line[:-1]
            col_names = col_names.split(" | ")
        # start at line 5 (0, because last loop ended on 5) and never stop (None), until the end
        for line in itertools.islice(f, 0, None):
            data.append(re.split(' ;|  ;', line[:-1]))
    # put data from file into lists
    redshift = []
    joint_orig = []
    gw_only_orig = []
    for entry in data:
        # use col_names variable to determine which values you want
        redshift.append(float(entry[0]))
        joint_orig.append(float(entry[1]))
        gw_only_orig.append(float(entry[2]))
    # take the z_scalar data from the efficiency file and convert to Mpc
    x_axis = [apc.Distance(z=elem) for elem in redshift]  # turn array of z_scalar values into Mpc values
    z_scalar = [z.value for z in x_axis]
    return joint_orig, gw_only_orig, z_scalar

def efficiency2(filename):
    # convert efficiency data into usable variables
    redshift = [i.strip().split()[0] for i in open(filename).readlines()]
    x_axis = [apc.Distance(z=float(elem)) for elem in redshift]
    z_scalar = [z.value for z in x_axis]
    efficiency = [i.strip().split()[1] for i in open(filename).readlines()]
    eff = [float(e) for e in efficiency]
    return z_scalar, eff

def gaussian(x, mu, sig):
    # returns a Gaussian of mean mu, standard deviation sig, across x-axis x
    # e^(-(x - mu)^2 / (2 * sig^2))
    return [np.exp(-np.power(elem - mu, 2.) / (2 * np.power(sig, 2.))) for elem in x]

def basic_detection_range(max_range, distances):
    # based on O3 detection ranges for aLIGO/Virgo, Howell ... Slaven-Blair's CHIME/LIGO MOU proposal
    # GW170817 occurred during O2
    return [1 if d <= max_range else 0 for d in distances]

def linear_detection_range(max_range, distances):
    # assuming a straight linear distribution
    # start at y=1, x=0Mpc, end at y=0, x=max_range, zero beyond max_range
    distribution = [-1/max_range*x+1 if -1/max_range*x+1>=0 else 0 for x in distances]
    number = 0
    for d in distribution:
        number = number + (d * max_range)
    return distribution, number/len(distribution)

# NGC 4993 Metric Distance Gaussian data; mu, sigma, min of x-axis (x1), max of x-axis (x2)
galaxy_mean = 38.909
galaxy_stdev = 4.251
galaxy_min = 31.000
galaxy_max = 44.000

# GW distance Gaussian data; mu, sigma, min of x-axis (x1), max of x-axis (x2)
gw_mean = 40
gw_stdev = 8

# Detection range
horizon_dist = 162.7799
# 162.7799 Mpc from EH on 4/9/2020 for O2
# 300.1294 Mpc from EH on 4/9/2020 for O3a

###########################
# Read in efficiency data #
###########################

# load the efficiency data from file
# gw_eff_file = "GW_efficiency/GW_Eff_funct_2G_2pt5G.txt"
# joint_orig, gw_only_orig, z_scalar = efficiency1(gw_eff_file)

z_scalar, o2_eff_curve = efficiency2("GW_efficiency/data_eff_LHV_O2_analytical.dat")

#######################################################
# Get the distribution of the galaxy and GW distances #
#######################################################

# get the distribution of the galaxy and GW distance wrt to the Mpc (nee z_scalar) from the
# efficiency file
galaxy_gauss = gaussian(z_scalar, galaxy_mean, galaxy_stdev)
gw_gauss = gaussian(z_scalar, gw_mean, gw_stdev)

#######################
# Combine information #
#######################

coinc_dist = np.array(galaxy_gauss) * np.array(gw_gauss) / o2_eff_curve

###############
# Plot things #
###############

# plot the Gaussians
plt.plot(z_scalar, galaxy_gauss, ':', color = 'cornflowerblue', label = 'NGC 4993 Metric Distance')
plt.plot(z_scalar, gw_gauss, '--', color='purple', label='Gravitational Waves')

# plot the efficiency data
# plt.plot(z_scalar, joint_orig, color ='lightgreen', label ='Efficiency O2 Joint')
# plt.plot(z_scalar, gw_only_orig, color ='mediumseagreen', label ='Efficiency O2 GW only')
plt.plot(z_scalar, o2_eff_curve, '-.', color ='darkgreen', label ='Efficiency O2')

# plot the detection ranges
# plt.plot(z_scalar, bns_detection_range, color = 'orange', label = 'Horizon Distance')

# plot the combined data
plt.plot(z_scalar, coinc_dist, color = 'black', label = 'Combined Distribution')

# pull all plots into the one, cohesive output and save to file
plt.title('Distance Estimates for the 17/08/17 events')
plt.xlabel('Distance (Mpc)')
plt.ylabel('Normalised PDF')
plt.xticks(rotation=90)
left, right = plt.xlim()
plt.xlim(10, 70)
plt.legend(loc=3)
plt.savefig('distance_plot', format='png')
plt.show()